package expression.parser;

import java.util.*;

import expression.*;


public class ExpressionParser implements Parser {
    int position = 0;
    String lastOperation;

    private Map<String, Integer> priorityMap = Map.of(
        "+", 2,
        "*", 4,
        "/", 4,
        "-", 2,
        "<<", 1,
        ">>", 1  
    );
    
    private Set<String> unaryOperationSet = Set.of(
        "-"
    );

    @Override
    public TripleExpression parse(String expression) {
        position = 0;
        lastOperation = null;
        return new ExpressionParser2().parse(expression);
        //return parseLevel(expression, null, null, null, 0, false, 0);
    }

    boolean log = false;
    protected CommonExpression parseLevel(String expression, 
                                            CommonExpression startLeft, 
                                            CommonExpression startRight, 
                                            String startOperation, int startPriority, boolean waitTokean, int level) {
        
        CommonExpression left = startLeft, right = startRight;
        String operation = startOperation;
        while (position < expression.length()) {
                
            String symbol = Character.toString(expression.charAt(position++));
            if (log) {   
                System.out.println(expression.substring(0, position - 1) +"\u001b[31m" +  (symbol.equals(" ") ? "_" : symbol) + "\u001b[0m" + expression.substring(position));
                System.out.println("level: " + level);
                System.out.println("left: " + left + "\n" + "operation: " + operation + "\n" + "right: " + right + "\n");
            }
            if (Character.isAlphabetic(symbol.charAt(0))) {
                if (left == null) {
                    left = new Variable(symbol);
                } else {
                    right = new Variable(symbol);
                }
            } else if (Character.isDigit(symbol.charAt(0))){
                if (left == null) {
                    left = constParse(expression);
                } else {
                    right = constParse(expression);
                }
            } else if (symbol.charAt(0) == '(') {
                if (left == null) {
                    left = parseLevel(expression, null, null, null, 0, false, 0);
                } else {
                    right = parseLevel(expression, null, null, null, 0, false, 0);
                }  
            } else if (symbol.charAt(0) == ')') {
                lastOperation = null;
                if (level > 0) {
                    position--;
                }
                return right == null ? left : converter(operation, left, right);
            } else if (priorityMap.containsKey(symbol) || priorityMap.containsKey(symbol + symbol)) {
                if (unaryOperationSet.contains(symbol) && (left == null || (right == null && operation != null))) {
                    if (left == null || ((right == null && operation != null))) {
                        if (Character.isDigit(expression.charAt(position))) {
                            if (left == null) {
                                left = constParse(expression);
                            } else {
                                right = constParse(expression);
                            }
                        } else {
                            if (left == null) {
                                left = converter(symbol, null, parseLevel(expression, null, null, null, 0, true, 0));
                            } else {
                                right = converter(symbol, null, parseLevel(expression, null, null, null, 0, true, 0));
                            }
                        }
                    } 
                } else {
                    if (priorityMap.containsKey(symbol + symbol)) {
                        position++;
                        symbol += symbol;
                    }
                    if (operation == null) {
                        operation = symbol;
                    } else {
                        if (priorityMap.get(operation) >= priorityMap.get(symbol)) {
                            boolean condition = priorityMap.get(operation) > priorityMap.get(symbol);
                            left = right == null ? left : converter(operation, left, right);
                            right = null;
                            operation = symbol;
                            if (startPriority >= priorityMap.get(symbol) && condition) {
                                lastOperation = symbol;
                                return left;
                            }   
                        } else if (priorityMap.get(operation) < priorityMap.get(symbol)) {
                            if (log) {
                                System.out.println("\u001b[36m" +"dive to the level " + (level) + " --> level " + (level + 1) + "\u001b[0m");
                            } 

                            right = parseLevel(expression, right, null, symbol, priorityMap.get(operation), false, level + 1);
                            
                            if (log) {
                                System.out.println("\u001b[32m" +"rose from the level " + (level + 1) + " --> level " + level + "\u001b[0m");
                                System.out.println("left: " + left + "\n" + "operation: " + operation + "\n" + "right: " + right + "\n");
                                System.out.println("\u001b[33m" +"symbol: " + symbol +", operation: " + operation + ", lastOperation: " + lastOperation + "\u001b[0m");
                            } 
                            if (lastOperation != null && priorityMap.get(operation) >= priorityMap.get(lastOperation)) {
                                left = right == null ? left : converter(operation, left, right);
                                right = null;
                                if (level != 0 && priorityMap.get(operation) > priorityMap.get(lastOperation)) {
                                    return left;
                                }
                                operation = lastOperation;
                            } else if (lastOperation != null && priorityMap.get(operation) < priorityMap.get(lastOperation)){
                                right = parseLevel(expression, right, null, lastOperation, priorityMap.get(operation), false, level + 1);
                            }
                        }
                    }   
                }      
            }
            if (waitTokean && left != null) {
                return left;
            }
        }
        if (log) {
            System.out.println("In the end: \n" + "left: " + left + "\n" + "operation: " + operation + "\n" + "right: " + right + "\n");
        }
        return right == null ? left : converter(operation, left, right);
    }

    
    protected Const constParse(String expression) {
        StringBuilder value = new StringBuilder();
        position--;
        if (expression.charAt(position) == '-') {
            value.append(expression.charAt(position++));
        }
        while (position < expression.length() && Character.isDigit(expression.charAt(position))) {
            value.append(expression.charAt(position++));
        }
        return new Const(Integer.parseInt(value.toString()));
    }

    protected CommonExpression converter(String symbol, CommonExpression op1, CommonExpression op2) {
        if (symbol.equals("+")) {
            return new Add(op1, op2);
        } else if (symbol.equals("-") && op1 != null) {
            return new Subtract(op1, op2);
        } else if (symbol.equals("*")) {
            return new Multiply(op1, op2);
        } else if (symbol.equals("/")) {
            return new Divide(op1, op2);
        } else if (symbol.equals(">>")) {
            return new RightShift(op1, op2);
        } else if (symbol.equals("<<")) {
            return new LeftShift(op1, op2);
        } else if (symbol.equals("-") && op1 == null) {
            return new UnaryMinus(op2);
        }
        return null;
    }

}
